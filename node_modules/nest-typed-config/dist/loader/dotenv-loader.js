"use strict";
/**
 * Parts of this file come from the official config module for Nest.js
 *
 * @see https://github.com/nestjs/config/blob/master/lib/config.module.ts
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dotenvLoader = void 0;
const fs = __importStar(require("fs"));
const path_1 = require("path");
const set_value_1 = __importDefault(require("set-value"));
const load_package_util_1 = require("../utils/load-package.util");
const debug_util_1 = require("../utils/debug.util");
let dotenv;
let dotenvExpand;
const loadEnvFile = (options) => {
    dotenv = (0, load_package_util_1.loadPackage)('dotenv', 'dotenvLoader');
    const envFilePaths = Array.isArray(options.envFilePath)
        ? options.envFilePath
        : [options.envFilePath || (0, path_1.resolve)(process.cwd(), '.env')];
    let config = {};
    for (const envFilePath of envFilePaths) {
        if (fs.existsSync(envFilePath)) {
            config = Object.assign(dotenv.parse(fs.readFileSync(envFilePath)), config);
            if (options.expandVariables) {
                dotenvExpand = (0, load_package_util_1.loadPackage)('dotenv-expand', "dotenvLoader's ability to expandVariables");
                config = dotenvExpand.expand({ parsed: config }).parsed;
            }
        }
        Object.entries(config).forEach(([key, value]) => {
            if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
                process.env[key] = value;
            }
            else {
                (0, debug_util_1.debug)(`"${key}" is already defined in \`process.env\` and will not be overwritten`);
            }
        });
    }
    return config;
};
/**
 * Dotenv loader loads configuration with `dotenv`.
 *
 */
const dotenvLoader = (options = {}) => {
    return () => {
        const { separator, keyTransformer, ignoreEnvFile, ignoreEnvVars } = options;
        let config = ignoreEnvFile ? {} : loadEnvFile(options);
        if (!ignoreEnvVars) {
            config = Object.assign(Object.assign({}, config), process.env);
        }
        if (keyTransformer !== undefined) {
            config = Object.entries(config).reduce((acc, [key, value]) => {
                acc[keyTransformer(key)] = value;
                return acc;
            }, {});
        }
        if (typeof separator === 'string') {
            const temp = {};
            Object.entries(config).forEach(([key, value]) => {
                (0, set_value_1.default)(temp, key.split(separator), value);
            });
            config = temp;
        }
        return config;
    };
};
exports.dotenvLoader = dotenvLoader;
//# sourceMappingURL=dotenv-loader.js.map